diff --git a/amrforth/v7/330/jtag/n_bootload_vector_explainer.md b/amrforth/v7/330/jtag/n_bootload_vector_explainer.md
index 4092a0d..809d797 100644
--- a/amrforth/v7/330/jtag/n_bootload_vector_explainer.md
+++ b/amrforth/v7/330/jtag/n_bootload_vector_explainer.md
@@ -1,46 +1,45 @@
 # Bootload Vector Explained
 
-*An attempt to explain the vectors and such.*
+bootload_vector_explainer.md
+
+
+An attempt to explain the vectors and such.
 
 ## Memory Map
 
 ### 9.2.1 Program Memory
 
-Memory flash space is `0x0000` to `0x1DFF`  (`0xFFFF` is `65535` decimal).
+Memory flash space is 0x0000 to 0x1DFF  (0xFFFF is 65535 decimal).
 
-`0x1DFF` is `7679` - 8 kb on-chip flashROM.
+0x1DFF is 7679 - 8 kb on-chip flashROM.
 
 Flash is read-only, unless the Program Store Write Enable bit
-(`PSCTL.0`) is set; the `MOVX` write instruction handles this.
+(PSCTL.0) is set; the MOVX write instruction handles this.
 
 
 **From bootloader330.fs**

-> bootloader, because `DPTR` is loaded with `$200` in the
-> bootloader right after `PSCTL.0` is set. The only way the bootloader
-> might be ruined is by having `PSCTL.0` set in the user's code&hellip;
-> and then accidentally jumping into the bootloader, at the point where
-> `DPTR` was just loaded with `$200`.
-> 
-> Not very likely.
->
-> The bootloader sets up the crossbar such that:*



+*     Host    downloader                      repeatedly sends $a5 to
-> The host PC downloader (running **gforth**) repeatedly sends $a5 to

+  the target system until it
-> the target system until it

+  gets a  $5a  in response. Then host sends
-  gets a `$5a` in response. Then host sends

+   "amr".  The target responds
-> `"amr"`. The target responds

+ with  $a5.  The host sends a byte containing
- with `$a5`. The host sends a byte containing

+  the number of  512  byte
-> the number of `512` byte

+ pages to be sent. The target erases those
- pages to be sent. The target erases those

+  pages and responds with  $5a.
-> pages and responds with `$5a`.

+  Then the host sends pages beginning with  page 1,  at address  $200
-> Then the host sends pages beginning with `page 1`, at address `$200`

+  or
-> or

+   512.          The target responds after each page is received
-> `512` decimal. The target responds after each page is received

+  with a byte
-> with a byte

+  containing the loop counter, i.e. number of pages remaining,
-> containing the loop counter, i.e. number of pages remaining,

+  including
-> including

+ the one just received. In other words  it counts down from
- the one just received. In other words, it counts down from

-> including the one just received. In other words, it counts down from
(repeated text was probably an editor gaffe not present in useful final results)

+  the total
-> the total

+ number of pages  to  1.*
- number of pages, to `1`.


+
+*Flash program memory can't be written unless PSCTL.0 is set. This bit
+is clear during normal operation. It is only set in the bootloader
+immediately before DPTR is loaded with $200. Even if a rogue program
+jumps into the middle of the bootloader it can't overwrite the

-> Flash program memory can't be written unless `PSCTL.0` is set. This
-> bit is clear during normal operation. It is only set in the bootloader
-> immediately before `DPTR` is loaded with `$200`. Even if a rogue
-> program jumps into the middle of the bootloader it can't overwrite
-> the 


+bootloader because DPTR is loaded with $200 in the bootloader right
+after PSCTL.0 is set. The only way the bootloader might be ruined is
+by having PSCTL.0 set in the user's code and then accidentally jumping
+into the bootloader at the point where DPTR was just loaded with $200.
+Not very likely.*
+
+*The bootloader sets up the crossbar such that:*
 
     TX= P0.4
     RX= P0.5
@@ -77,12 +76,6 @@ romHERE ( *) $200 org
 label main  c; ( *) org
 ```
 
-<!--
-`1234567890123456789012345678901234567890123456789012345678901234567..]..345`
--->
-
 **Mon 14 Nov 13:20:06 UTC 2022**
 
-**n_bootload_vector_explainer.md**
-
 **END.**
